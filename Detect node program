 #include "stm32f10x.h"
#include "bsp_led.h"  
#include "bsp_GeneralTim.h" 
#include "bsp_adc.h"
#include "OLED_I2C.h"
#include "delay.h"
#include "bsp_key.h"  
#include "beep.h"
#include "nrf24l01.h"
#include "sys.h"
#include "bsp_usart.h"
#include "bsp_dht11.h"
#include "ds18b20.h"
#define uint unsigned int
#define uchar unsigned char
/// 
void num_char(uint x);

uchar adc1_num[ ]="12345";
uint ADC_ConvertedValueLocal[NOFCHANEL];
extern __IO uint16_t ADC_ConvertedValue[NOFCHANEL];
char *reverse(char *s)
{
    char temp;
    char *p = s;    //p指向s的头部
    char *q = s;    //q指向s的尾部
    while(*q)
        ++q;
    q--;
    
    //交换移动指针，直到p和q交叉
    while(q > p)
    {
        temp = *p;
        *p++ = *q;
        *q-- = temp;
    }
    return s;
}
// //检测到的传感器ID存数组
extern unsigned char DS18B20_ID[8][8];
extern unsigned char DS18B20_SensorNum;
int main(void)
{ 
  char *string = my_itoa(12700);
 uchar TEMP[]="TEMP:";/*温度 ℃*/
 uchar HUM[]="HUM:";  /*湿度 %Rh*/
 uchar CDQ[]="CDQ:";    /*光强 lux*/
 uchar SHUM[]="SHUM:";/*土壤水分 %*/
 uchar PSI[]="PSI:";/*空气质量 ppm*/
 uchar RCD[]="RCD:";/*雨情 mm*/
 u8 rx_buf[40];
  u16 TEMP1=0,HUM1=0,CDQ1=0,SHUM1=0,PSI1=0,RCD1=0;
 int adc_A5_i,adc_A7_i,adc_A1_U,adc_B0_U;
 int duty_set=10,fre_set=100;
 int set_point=5000;
 float Temp;
  u8 num=0,i;
  
 SystemInit();
 
 NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
  LED_GPIO_Config();
 //BEEP_Init();
 ADCx_Init();
 SPI2_Init();
  NRF24L01_Init();
 /* 高级定时器初始化 */
  GENERAL_TIM_Init(duty_set , fre_set);
  DelayInit();
 I2C_Configuration();
 OLED_Init();
 OLED_CLS();
 Key_GPIO_Config();
  pid_text_init();
 OLED_Fill(0xFF);//全屏点亮
 DelayMs(1000);
 OLED_Fill(0x00);//全屏灭
 DHT11_Data_TypeDef DHT11_Data;
 /* 配置Systick 为1us中断一次 */
 
 USART_Config();//初始化串口2
 /*初始化DT11的引脚*/
 DHT11_Init ();
 
 /*初始化DS18b20的引脚*/
  u8 DS18B20_Init();
 while(NRF24L01_Check())  //检测NRF24L01是否存在
 {
  GPIO_SetBits(GPIOC,GPIO_Pin_13); 
  OLED_ShowStr(0,1,(unsigned char*)"NRF Error",1);
  OLED_ShowStr(0,2,(unsigned char*)"Please chect NRF",1);
 }
 
 NRF24L01_TX_Mode();
   while (DS18B20_Init())   //检测DS18B20是否存在
  {
   OLED_ShowStr(0,1,(unsigned char*)"Ds18B20 Error",1);
  }
    while(1)
    {
    LED1_TOGGLE;
    num=DS18B20_Search_Rom(1);
    for(i=0;i<num;i++)
  {
  TEMP1=DS18B20_Get_Temp1(i);
  }
  if( DHT11_Read_TempAndHumidity ( & DHT11_Data ) == SUCCESS)
  {
   HUM1=DHT11_Data.humi_int;
  }
  if(NRF24L01_TxPacket(rx_buf)==TX_OK)
   {
    GPIO_ResetBits(GPIOC,GPIO_Pin_13);
   }
   else
   {
       GPIO_SetBits(GPIOC,GPIO_Pin_13);
       DelayMs(100);
       GPIO_ResetBits(GPIOC,GPIO_Pin_13);
       DelayMs(100);    
       }
       rx_buf[0]=TEMP1>>8;//温度
   rx_buf[1]=TEMP1;
   rx_buf[2]=HUM1>>8;//湿度
   rx_buf[3]=HUM1;
   rx_buf[4]=adc_B0_U>>8;//光照强度
   rx_buf[5]=adc_B0_U;
   rx_buf[6]=adc_A5_i>>8;//土壤水分
   rx_buf[7]=adc_A5_i;
   rx_buf[8]=adc_A7_i>>8;//空气质量
   rx_buf[9]=adc_A7_i;
   rx_buf[10]=adc_A1_U>>8;//雨情
   rx_buf[11]=adc_A1_U;
  adc_A5_i = ADC_ConvertedValue[0]*33000/4096;
  adc_A7_i = ADC_ConvertedValue[1]*33000/4096;
  adc_A1_U = ADC_ConvertedValue[2]*33000/4096;
  adc_B0_U = ADC_ConvertedValue[3]*33000/4096;
   ///温度显示// 
     string = my_itoa(TEMP1);
  OLED_ShowStr(0,0,TEMP,1);
  OLED_ShowStr(40,0,string,1);
///湿度显示//
       string = my_itoa(HUM1);
    OLED_ShowStr(0,1,HUM,1);
      OLED_ShowStr(40,1,string,1);
  
///光强显示//
 //   adc_A5_i=adc_A5_i*30.3/50;  
  string = my_itoa(adc_B0_U); 
  OLED_ShowStr(0,2,CDQ,1);
  OLED_ShowStr(40,2,string,1);
///土壤水分显示//
//  adc_A7_i= adc_A7_i*30.3/50;
   string = my_itoa(adc_A5_i);//32991：最干燥 (32991-采集值)/32991=水分  %
  OLED_ShowStr(0,3,SHUM,1);
  OLED_ShowStr(40,3,string,1);
  
///空气质量显示//  10--1000ppm
   string = my_itoa(adc_A7_i);      //  
  OLED_ShowStr(0,4,PSI,1);
  OLED_ShowStr(40,4,string,1);
  
///雨情显示//  
   string = my_itoa(adc_A1_U);//32991：雨情最小即未下雨  (32991-采集值)/32991=雨情 %
  OLED_ShowStr(0,5,RCD,1);
  OLED_ShowStr(40,5,string,1);
  
  OLED_ShowStr(25,6,"First node",2);
    LED2_TOGGLE;
    }
 }
